document.addEventListener('DOMContentLoaded', () => {

// ===================================================
// ‚úÖ ÿØÿßŸÑÿ© ŸÑÿ™ŸÜÿ≥ŸäŸÇ ÿßŸÑÿ£ÿ±ŸÇÿßŸÖ: ÿ™ÿ∂ŸäŸÅ ÿßŸÑŸÅÿßÿµŸÑÿ© ŸÑŸÉŸÑ 3 ÿ£ÿ±ŸÇÿßŸÖ
//    Ÿàÿ™ÿπÿ±ÿ∂ ÿ±ŸÇŸÖ ÿπÿ¥ÿ±Ÿä ŸÖŸÉŸàŸÜ ŸÖŸÜ ÿÆÿßŸÜÿ™ŸäŸÜ
// ===================================================
function formatPrice(num) {
  const number = parseFloat(num.toString().replace(/,/g, ''));
  if (isNaN(number)) return num;
  return number.toLocaleString('en-US', {
    minimumFractionDigits: 2,
    maximumFractionDigits: 2
  });
}

// ===================================================
// ‚úÖ ÿ™ÿ∫ŸäŸäÿ± ŸÜÿµŸàÿµ ÿßŸÑÿ£ÿ≤ÿ±ÿßÿ± (ÿ¥ÿ±ÿßÿ° + ÿ•ÿ∂ÿßŸÅÿ© ŸÑŸÑÿπÿ±ÿ®ÿ©)
// ===================================================
const buyBtn = document.querySelector(".buy-button");
if (buyBtn) buyBtn.textContent = "ÿßÿ∑ŸÑÿ® ÿßŸÑÿ¢ŸÜ";

const cartBtn = document.querySelector(".add-to-cart");
if (cartBtn) cartBtn.textContent = "ÿ£ÿ∂ŸÅ ŸÑŸÑÿπÿ±ÿ®ÿ©";

// ===================================================
// ‚úÖ ÿπÿ±ÿ∂ ÿπÿØÿØ ÿßŸÑÿ™ŸÇŸäŸäŸÖÿßÿ™: ÿ¨ŸÑÿ® ÿßŸÑÿπÿØÿØ ŸÖŸÜ data-count
//    Ÿàÿ™ŸÜÿ≥ŸäŸÇŸá ŸÑŸäÿ∏Ÿáÿ± ÿ®ÿ¨ÿßŸÜÿ® ŸÉŸÑŸÖÿ© "ÿ™ŸÇŸäŸäŸÖÿßÿ™"
// ===================================================
const ratingCount = document.getElementById("goToReviews");
if (ratingCount) {
  const count = ratingCount.getAttribute("data-count") || "0";
  ratingCount.textContent = `${count} ÿ™ŸÇŸäŸäŸÖÿßÿ™`;
}

// ===================================================
// ‚úÖ ÿ™ŸÜÿ≥ŸäŸÇ ŸÖÿØÿ© ÿßŸÑÿ¥ÿ≠ŸÜ: ÿ•ÿ∂ÿßŸÅÿ© ŸÉŸÑŸÖÿ© "ÿ£ŸäÿßŸÖ" ÿ®ÿπÿØ ÿßŸÑÿ±ŸÇŸÖ
// ===================================================
const shippingTime = document.querySelector(".shipping-time .value");
if (shippingTime) {
  const text = shippingTime.innerText.trim();
  const match = text.match(/[\d\s\-‚Äì]+/);
  if (match) {
    shippingTime.innerText = `${match[0]} ÿ£ŸäÿßŸÖ`;
  }
}

// ===================================================
// ‚úÖ ÿ™ŸÑŸàŸäŸÜ ÿ™ŸÉŸÑŸÅÿ© ÿßŸÑÿ¥ÿ≠ŸÜ ÿ•ÿ∞ÿß ŸÉÿßŸÜÿ™ "ŸÖÿ¨ÿßŸÜÿß" ÿ®ÿßŸÑŸÑŸàŸÜ ÿßŸÑÿ£ÿÆÿ∂ÿ±
//    Ÿàÿ•ÿ∞ÿß ŸÑŸÖ ÿ™ŸÉŸÜ ŸÖÿ¨ÿßŸÜŸäÿ© Ÿäÿ™ŸÖ ÿßÿ≥ÿ™ÿÆÿØÿßŸÖ ÿßŸÑŸÑŸàŸÜ ÿßŸÑÿßŸÅÿ™ÿ±ÿßÿ∂Ÿä
// ===================================================
const shippingBox = document.querySelector(".shipping-fee .value");
if (shippingBox) {
  if (/ŸÖÿ¨ÿßŸÜÿß|ŸÖÿ¨ÿßŸÜÿßŸã/.test(shippingBox.innerText.trim())) {
    Object.assign(shippingBox.style, { color: "#2e7d32", fontWeight: "bold" });
  } else {
    Object.assign(shippingBox.style, { color: "#222", fontWeight: "normal" });
  }
}

// ===================================================
// ‚úÖ ÿπŸÜÿØ ÿ™ÿ≠ŸÖŸäŸÑ ÿßŸÑÿµŸÅÿ≠ÿ©: ŸÖÿπÿßŸÑÿ¨ÿ© ŸÖÿπŸÑŸàŸÖÿßÿ™ ÿßŸÑŸÖŸÜÿ™ÿ¨
//    - ÿ™ŸÑŸàŸäŸÜ ÿ≠ÿßŸÑÿ© ÿßŸÑÿ™ŸàŸÅÿ± (ŸÖÿ™ÿßÿ≠/ÿ∫Ÿäÿ± ŸÖÿ™ÿßÿ≠)
//    - ÿßŸÑÿ™ÿ≠ŸÇŸÇ ŸÖŸÜ ÿßŸÑÿ¥ÿ≠ŸÜ ŸàÿßŸÑŸÖŸÜÿ™ÿ¨
//    - ÿ•ÿÆŸÅÿßÿ° ŸÖÿØÿ© ÿßŸÑÿ¥ÿ≠ŸÜ ÿ•ÿ∞ÿß ÿßŸÑŸÖŸÜÿ™ÿ¨ ÿ∫Ÿäÿ± ŸÖÿ™ŸàŸÅÿ±
// ===================================================
document.addEventListener("DOMContentLoaded", function () {
  const boxes = document.querySelectorAll(".info-box");

  let shippingStatus = null;
  let availability = null;
  let shippingTimeBox = null;

  boxes.forEach(box => {
    const value = box.querySelector(".value");
    if (!value) return;

    const text = value.textContent.trim();

    // ‚úÖ ÿ™ŸÑŸàŸäŸÜ ÿßŸÑŸÜÿµ ÿ•ÿ∞ÿß ÿßŸÑŸÖŸÜÿ™ÿ¨ ŸÖÿ™ŸàŸÅÿ± ÿ£Ÿà ÿ∫Ÿäÿ± ŸÖÿ™ŸàŸÅÿ±
    if (/ŸÖÿ™ÿßÿ≠|ŸÖÿ™ŸàŸÅÿ±/.test(text)) {
      Object.assign(value.style, { color: "#2e7d32", fontWeight: "bold" });
    } else if (/ÿ∫Ÿäÿ± ŸÖÿ™ÿßÿ≠|ÿ∫Ÿäÿ± ŸÖÿ™ŸàŸÅÿ±/.test(text)) {
      Object.assign(value.style, { color: "#c62828", fontWeight: "bold" });
    }

    // ‚úÖ ÿ™ÿÆÿ≤ŸäŸÜ ÿßŸÑÿπŸÜÿßÿµÿ± ÿßŸÑŸÖÿ≥ÿ™ÿÆÿØŸÖÿ© ŸÑÿßÿ≠ŸÇŸãÿß
    if (box.classList.contains("shipping-status")) shippingStatus = text;
    if (box.classList.contains("product-availability")) availability = text;
    if (box.classList.contains("shipping-time")) shippingTimeBox = value;
  });

  // ‚úÖ ÿ•ÿ∞ÿß ÿßŸÑŸÖŸÜÿ™ÿ¨ ÿ∫Ÿäÿ± ŸÖÿ™ŸàŸÅÿ± ÿ£Ÿà ŸÑÿß Ÿäÿ¥ÿ≠ŸÜ ‚Üí ŸÜÿÆŸÅŸä ŸÖÿØÿ© ÿßŸÑÿ¥ÿ≠ŸÜ
  const negativeKeywords = ["ÿ∫Ÿäÿ±", "ÿ∫Ÿäÿ± ŸÖÿ™ÿßÿ≠", "ÿ∫Ÿäÿ± ŸÖÿ™ŸàŸÅÿ±", "ŸÑÿß Ÿäÿ¥ÿ≠ŸÜ"];

  if (
    negativeKeywords.some(word => shippingStatus?.includes(word)) ||
    negativeKeywords.some(word => availability?.includes(word))
  ) {
    if (shippingTimeBox) {
      shippingTimeBox.textContent = "-";
      Object.assign(shippingTimeBox.style, { color: "#000", fontWeight: "normal" });
    }
  }
});

// ===================================================
// ‚úÖ ÿÆÿ±Ÿäÿ∑ÿ© ÿßŸÑÿπŸÖŸÑÿßÿ™
// ===================================================
const currencySymbols = {
  "SA": "ÿ±.ÿ≥", // ÿßŸÑÿ≥ÿπŸàÿØŸäÿ©
  "AE": "ÿØ.ÿ•", // ÿßŸÑÿ•ŸÖÿßÿ±ÿßÿ™
  "OM": "ÿ±.ÿπ", // ÿπŸèŸÖÿßŸÜ
  "MA": "ÿØ.ŸÖ", // ÿßŸÑŸÖÿ∫ÿ±ÿ®
  "DZ": "ÿØ.ÿ¨", // ÿßŸÑÿ¨ÿ≤ÿßÿ¶ÿ±
  "TN": "ÿØ.ÿ™"  // ÿ™ŸàŸÜÿ≥
};

// ‚úÖ ÿØÿßŸÑÿ© ÿ™ÿ¨Ÿäÿ® ÿ±ŸÖÿ≤ ÿßŸÑÿπŸÖŸÑÿ© ÿ≠ÿ≥ÿ® ÿßŸÑÿØŸàŸÑÿ© ÿßŸÑŸÖÿÆÿ≤ŸÜÿ©
function getCurrencySymbol() {
  const country = localStorage.getItem("Cntry") || "SA";
  return currencySymbols[country] || "ÿ±.ÿ≥";
}

// ===================================================
// ‚úÖ ÿ™ŸÜÿ≥ŸäŸÇ ÿ™ŸÉŸÑŸÅÿ© ÿßŸÑÿ¥ÿ≠ŸÜ
// ===================================================
const shippingFee = document.querySelector(".shipping-fee .value");
if (shippingFee) {
  const text = shippingFee.innerText.trim();
  const match = text.match(/[\d.,\-‚Äì]+/);
  if (match) {
    const formatted = formatPrice(match[0]);
    shippingFee.innerText = `${formatted} ${getCurrencySymbol()}`;
  }
}

// ==============================
// ‚úÖ ÿ≠ÿ≥ÿßÿ® ŸÜÿ≥ÿ®ÿ© ÿßŸÑÿÆÿµŸÖ ŸàÿßŸÑÿ™ŸàŸÅŸäÿ±
// ==============================
window.updateDiscount = function () {
  const originalEl = document.querySelector(".price-original");
  const discountedEl = document.querySelector(".price-discounted");
  const discountEl = document.querySelector(".discount-percentage");
  const savingEl = document.querySelector(".price-saving");

  if (!originalEl || !discountedEl) return;

  const original = parseFloat(originalEl.textContent.trim()) || 0;
  const discounted = parseFloat(discountedEl.textContent.trim()) || 0;

  if (original > 0 && discounted > 0 && discounted < original) {
    // ‚úÖ ŸÜÿ≥ÿ®ÿ© ÿßŸÑÿÆÿµŸÖ
    if (discountEl) {
      const percentage = Math.round(((original - discounted) / original) * 100);
      discountEl.textContent = `${percentage}%`;
    }

    // ‚úÖ ŸÇŸäŸÖÿ© ÿßŸÑÿ™ŸàŸÅŸäÿ±
    if (savingEl) {
      const difference = (original - discounted).toFixed(2);
      savingEl.textContent = `ŸàŸÅÿ±: ${difference}`;
    }
  } else {
    if (discountEl) discountEl.textContent = "";
    if (savingEl) savingEl.textContent = "";
  }
};

// ===================================================
// ‚úÖ ÿ™ŸÜÿ≥ŸäŸÇ ÿßŸÑÿ£ÿ≥ÿπÿßÿ± (ŸÖÿπ ÿßŸÑÿπŸÖŸÑÿ© ÿ≠ÿ≥ÿ® ÿßŸÑÿØŸàŸÑÿ©)
// ===================================================
document.querySelectorAll(".price-original, .price-discounted, .price-saving").forEach(el => {
  const text = el.innerText.trim();

  // ‚úÖ ÿ≠ÿßŸÑÿ© ÿßŸÑÿ™ŸàŸÅŸäÿ±: "ŸàŸÅÿ±: ..."
  if (el.classList.contains("price-saving") && text.includes("ŸàŸÅÿ±:")) {
    const match = text.match(/ŸàŸÅÿ±:\s*([\d.,]+)/);
    if (match && match[1]) {
      const formatted = formatPrice(match[1]);
      el.innerText = `ŸàŸÅÿ±: ${formatted} ${getCurrencySymbol()}`;
    }
    return;
  }

  // ‚úÖ ÿßŸÑÿ£ÿ≥ÿπÿßÿ± ÿßŸÑÿπÿßÿØŸäÿ©
  const numberOnly = text.match(/[\d.,]+/);
  if (numberOnly) {
    const formatted = formatPrice(numberOnly[0]);
    el.innerText = `${formatted} ${getCurrencySymbol()}`;
  }
});

// ==============================
// ‚úÖ ÿ≠ÿ≥ÿßÿ® ÿßŸÑÿ™ŸàŸÅŸäÿ±
// ==============================
document.addEventListener("DOMContentLoaded", function () {
  const oldPriceEl = document.querySelector(".price-original");
  const newPriceEl = document.querySelector(".price-discounted");
  const discountValueEl = document.querySelector(".price-saving");

  if (oldPriceEl && newPriceEl && discountValueEl) {
    const oldPrice = parseFloat(oldPriceEl.textContent.replace(/[^\d.]/g, ""));
    const newPrice = parseFloat(newPriceEl.textContent.replace(/[^\d.]/g, ""));

    if (!isNaN(oldPrice) && !isNaN(newPrice) && oldPrice > newPrice) {
      const difference = oldPrice - newPrice;

      if (difference < 50) {
        discountValueEl.textContent = "";
      } else {
        const formattedDiff = difference.toFixed(2);

        // ÿ®ÿØŸàŸÜ ÿ£Ÿä ŸÖÿ≥ÿßŸÅÿ© ÿ£Ÿà margin ÿ¨ŸÜÿ® ÿßŸÑÿ¨ŸäŸÅ
        discountValueEl.innerHTML = `
          <span class="save-label">ŸàŸÅÿ±: </span>
          <span class="save-amount">${formattedDiff} ${getCurrencySymbol()}</span>
        `;

        let color = "#2c3e50";
        if (difference >= 100 && difference < 200) {
          color = "#1abc9c";
        } else if (difference < 400) {
          color = "#2ecc71";
        } else if (difference < 600) {
          color = "#e67e22";
        } else if (difference < 1000) {
          color = "#c0392b";
        } else if (difference < 1500) {
          color = "#f5008b";
        } else if (difference < 2000) {
          color = "#8e44ad";
        } else {
          color = "#f39c12";
        }

        discountValueEl.style.fontWeight = "bold";
        discountValueEl.style.color = color;

        discountValueEl.setAttribute(
          "title",
          `Ÿáÿ∞ÿß ÿßŸÑŸÖÿ®ŸÑÿ∫ ŸáŸà ÿßŸÑŸÅÿ±ŸÇ ÿ®ŸäŸÜ ÿßŸÑÿ≥ÿπÿ± ÿßŸÑŸÇÿØŸäŸÖ (${oldPrice.toFixed(2)}) ŸàÿßŸÑÿ¨ÿØŸäÿØ (${newPrice.toFixed(2)})`
        );

        if (difference >= 500) {
          const fireGif = document.createElement("img");
          fireGif.src = "https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEj5J9EL4a9cV3VWmcK1ZYD6OYEB-1APv9gggocpaa7jAJXdgvX8Q7QiaAZC9NxcN25f8MTRSYD6SKwT1LSjL0SB1ovJH1SSkRmqH2y3f1NzWGkC0BE-gpj5bTc1OKi3Rfzh44sAAJSvOS5uq7Ut9ETN-V9LgKim0dkmEVmqUWa-2ZGA7FvMAYrVaJgn/w199-h200/fire%20(1).gif";
          fireGif.alt = "üî•üî•üî•";
          fireGif.style.width = "25px";
          fireGif.style.height = "25px";
          fireGif.style.verticalAlign = "middle";
          fireGif.style.margin = "0"; 

          const saveAmountEl = discountValueEl.querySelector(".save-amount");
          saveAmountEl.appendChild(fireGif);
        }
      }
    } else {
      discountValueEl.textContent = "";
    }
  }
});

  // ==============================
  // ‚úÖ ÿßŸÑÿ±ÿ≥ŸÖ ÿßŸÑÿ®ŸäÿßŸÜŸä
  // ==============================

document.addEventListener('DOMContentLoaded', function () {
  if (typeof priceData === "undefined" || !Array.isArray(priceData)) return;

  const merged = {};
  priceData.forEach(item => {
    if (!merged[item.date]) merged[item.date] = { total: 0, count: 0 };
    merged[item.date].total += item.price;
    merged[item.date].count += 1;
  });

  const finalData = Object.keys(merged).map(date => ({
    date,
    price: +(merged[date].total / merged[date].count).toFixed(2)
  }));

  const prices = finalData.map(x => x.price);
  const dates = finalData.map(x => x.date);
  const min = Math.min(...prices);
  const max = Math.max(...prices);
  const avg = +(prices.reduce((a, b) => a + b, 0) / prices.length).toFixed(2);
  const endPrice = prices[prices.length - 1];
  const prevPrice = prices[prices.length - 2] || endPrice;

  const getArrow = (value, compare) => {
    if (value > compare) return `<span class="stat-arrow arrow-up">‚ñ≤</span>`;
    if (value < compare) return `<span class="stat-arrow arrow-down">‚ñº</span>`;
    return "";
  };

  const stats = `
    <div class="price-stats">
      <div class="stat-item current"><strong>ÿßŸÑÿ≥ÿπÿ± ÿßŸÑÿ≠ÿßŸÑŸä:</strong> ${endPrice} ÿ±.ÿ≥ ${getArrow(endPrice, prevPrice)} <small style="font-size:12px;color:#666;">(${(endPrice - prevPrice).toFixed(2)} ÿ±.ÿ≥)</small></div>
      <div class="stat-item"><strong>ÿßŸÑŸÖÿ™Ÿàÿ≥ÿ∑:</strong> ${avg} ÿ±.ÿ≥ ${getArrow(avg, endPrice)}</div>
      <div class="stat-item"><strong>ÿ£ŸÇŸÑ ÿ≥ÿπÿ±:</strong> ${min} ÿ±.ÿ≥ ${getArrow(min, endPrice)}</div>
      <div class="stat-item"><strong>ÿ£ÿπŸÑŸâ ÿ≥ÿπÿ±:</strong> ${max} ÿ±.ÿ≥ ${getArrow(max, endPrice)}</div>
    </div>
  `;
  document.getElementById("priceChart")?.insertAdjacentHTML("afterend", stats);

  const tooltipEl = document.createElement("div");
  tooltipEl.id = "chart-tooltip";
  document.body.appendChild(tooltipEl);

  const externalTooltipHandler = (context) => {
    const { chart, tooltip } = context;
    const el = tooltipEl;

    if (tooltip.opacity === 0) {
  el.style.opacity = 0;
  el.style.display = "none";
  return;
}

el.style.display = "block";
el.style.opacity = 1;


    const dataIndex = tooltip.dataPoints[0].dataIndex;
    const value = tooltip.dataPoints[0].raw;
    const prev = dataIndex > 0 ? finalData[dataIndex - 1].price : value;
    const diff = +(value - prev).toFixed(2);
    const percent = prev !== 0 ? ((diff / prev) * 100).toFixed(1) : 0;

    const arrow = diff > 0
      ? `<span class="stat-arrow arrow-up">‚ñ≤</span>`
      : diff < 0
        ? `<span class="stat-arrow arrow-down">‚ñº</span>`
        : `<span class="stat-arrow">-</span>`;

    const date = finalData[dataIndex].date;

el.innerHTML = `
  <div class="tooltip-line" style="font-weight:bold;">${date}</div>
  <div class="tooltip-line">ÿßŸÑÿ≥ÿπÿ±: ${value} ÿ±.ÿ≥</div>
  <div class="tooltip-line">ÿßŸÑÿ™ÿ∫Ÿäÿ±: ${arrow} ${diff} ÿ±.ÿ≥</div>
  <div class="tooltip-line">ÿßŸÑŸÜÿ≥ÿ®ÿ©: ${percent}%</div>
`;

    const position = chart.canvas.getBoundingClientRect();
    el.style.opacity = 1;
    const tooltipWidth = 160; // ÿ™ŸÇÿØŸäÿ±Ÿä ‚Äì ÿ≠ÿ≥ÿ® ÿ™ÿµŸÖŸäŸÖ ÿßŸÑÿ™ŸàŸÑÿ™Ÿäÿ®
const pageWidth = window.innerWidth;
const chartLeft = position.left + window.pageXOffset;
const pointX = chartLeft + tooltip.caretX;

// ŸÑŸà ÿßŸÑŸÜŸÇÿ∑ÿ© ŸÇÿ±ÿ®ÿ™ ŸÖŸÜ ÿ∑ÿ±ŸÅ ÿßŸÑŸäŸÖŸäŸÜ (ÿ£ÿ®ÿπÿØ ŸÖŸÜ 70% ŸÖŸÜ ÿßŸÑÿ¥ÿßÿ¥ÿ©) ‚Üí ÿÆŸÑŸäŸá ŸäŸÅÿ™ÿ≠ ŸÜÿßÿ≠Ÿäÿ© ÿßŸÑÿ¥ŸÖÿßŸÑ
if (pointX > pageWidth * 0.7) {
  el.style.left = (pointX - tooltipWidth - 20) + 'px';
} else {
  el.style.left = (pointX + 10) + 'px';
}

el.style.top = position.top + window.pageYOffset + tooltip.caretY - 40 + 'px';
  };

  const ctx = document.getElementById("priceChart")?.getContext("2d");
  if (ctx) {
    new Chart(ctx, {
      type: "line",
      data: {
        labels: dates,
        datasets: [{
          label: "ÿßŸÑÿ≥ÿπÿ± (ÿ±.ÿ≥)",
          data: finalData.map(d => d.price),
          borderColor: "#2c3e50",
          backgroundColor: "rgba(44,62,80,0.1)",
          borderWidth: 3,
          pointRadius: 4,
          pointHoverRadius: 6,
          fill: true,
          tension: 0.2
        }]
      },
      options: {
        responsive: true,
        interaction: {
          mode: 'index',
          intersect: false
        },
        plugins: {
          tooltip: {
            enabled: false,
            external: externalTooltipHandler
          }
        },
        scales: {
          x: {
            title: {
              display: true,
              text: "ÿßŸÑÿ™ÿßÿ±ŸäÿÆ",
              color: "#333",
              font: { size: 14 }
            },
            ticks: { color: "#333" },
            grid: { color: "rgba(0, 0, 0, 0.05)" }
          },
          y: {
            title: {
              display: true,
              text: "ÿßŸÑÿ≥ÿπÿ± (ÿ±.ÿ≥)",
              color: "#333",
              font: { size: 14 }
            },
            ticks: { color: "#333" },
            grid: { color: "rgba(0, 0, 0, 0.05)" }
          }
        }
      }
    });
  }
});

  // ==============================
  // ‚úÖ ŸÜŸáÿßŸäÿ© ÿßŸÑÿ•ÿ≥ŸÉÿ±ÿ®ÿ™
  // ==============================
